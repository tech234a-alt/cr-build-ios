# This is a basic workflow to help you get started with Actions
# https://github.com/jedieaston/ungoogled-chromium-windows/blob/master/.github/workflows/build.yml

name: Compile

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  #push:
  #  branches: [ master ]
#   pull_request:
#     branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    # The type of runner that the job will run on
    runs-on: macos-14

    # https://github.com/reitermarkus/dotfiles/blob/7faa1caddd086e8fbb9c5e964285e5031a8d14a5/.github/workflows/ci.yml
    # Steps represent a sequence of tasks that will be executed as part of the job
    # sed line created using ChatGPT
    steps:
      - name: Download dependencies and prep source
        env:
          DEVELOPER_DIR: /Applications/Xcode_15.2.app/Contents/Developer
        run: |
          git clone --depth 1 https://chromium.googlesource.com/chromium/tools/depot_tools.git &&
          export PATH="$PATH:$(pwd)/depot_tools" &&
          mkdir chromium && cd chromium &&
          fetch --no-history ios &&
          cd src &&
          python3 -c "
          file_path = 'gin/v8_platform.cc'
          old_text = '''#endif  // BUILDFLAG(USE_PARTITION_ALLOC)\n\nstd::shared_ptr<v8::TaskRunner> V8Platform::GetForegroundTaskRunner(\n'''
          new_text = '''#else\nPageAllocator* V8Platform::GetPageAllocator() {\nreturn nullptr;\n}\n\nvoid V8Platform::OnCriticalMemoryPressure() {}\n#endif  // BUILDFLAG(USE_PARTITION_ALLOC)\n\nstd::shared_ptr<v8::TaskRunner> V8Platform::GetForegroundTaskRunner(\n'''

          with open(file_path, 'r') as file:
              file_content = file.read()
              new_content = file_content.replace(old_text, new_text)

          with open(file_path, 'w') as file:
              file.write(new_content)

          print('Replacement complete.')
          " &&
          python3 -c "
          file_path = 'gin/public/v8_platform.h'
          old_text = '''#if BUILDFLAG(USE_PARTITION_ALLOC)'''
          new_text = ''

          with open(file_path, 'r') as file:
              file_content = file.read()
              new_content = file_content.replace(old_text, new_text)

          with open(file_path, 'w') as file:
              file.write(new_content)

          print('Replacement complete.')
          " &&
          python3 -c "
          file_path = 'gin/public/v8_platform.h'
          old_text = '''GetThreadIsolatedAllocator() override;\n#endif'''
          new_text = 'GetThreadIsolatedAllocator() override;'

          with open(file_path, 'r') as file:
              file_content = file.read()
              new_content = file_content.replace(old_text, new_text)

          with open(file_path, 'w') as file:
              file.write(new_content)

          print('Replacement complete.')
          " &&
          echo -e "[gn_args]\nuse_blink = true\nios_enable_code_signing = false\nios_app_bundle_id_prefix = \"com.testblink001\"\nuse_partition_alloc = false\nsymbol_level = 0\nis_debug = false\nenable_nacl = false\nblink_symbol_level = 0\nv8_symbol_level = 0\n" > ~/.setup-gn &&
          python3 ios/build/tools/setup-gn.py
      - name: Compilation
        env:
          DEVELOPER_DIR: /Applications/Xcode_15.2.app/Contents/Developer
        run: |
          export PATH="$PATH:$(pwd)/depot_tools" && cd chromium/src && autoninja -C out/Release-iphoneos content_shell
      - name: Zip save
        continue-on-error: true
        run: |
          zip -q -r out.zip chromium/src/out/Debug-iphoneos
      - uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: chromium-ios-zip
          path: out.zip
