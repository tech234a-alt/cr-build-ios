# This is a basic workflow to help you get started with Actions
# https://github.com/jedieaston/ungoogled-chromium-windows/blob/master/.github/workflows/build.yml

name: Build it!

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  #push:
  #  branches: [ master ]
#   pull_request:
#     branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: macos-13

    # https://github.com/reitermarkus/dotfiles/blob/7faa1caddd086e8fbb9c5e964285e5031a8d14a5/.github/workflows/ci.yml
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Uninstall gems
        run: |
          set -e
          set -u
          set -o pipefail

          for gem in $(/usr/bin/gem list --no-versions | grep -v \
                                                              -e 'bigdecimal' \
                                                              -e 'CFPropertyList' \
                                                              -e 'cmath' \
                                                              -e 'csv' \
                                                              -e 'date' \
                                                              -e 'dbm' \
                                                              -e 'did_you_mean' \
                                                              -e 'e2mmap' \
                                                              -e 'etc' \
                                                              -e 'fcntl' \
                                                              -e 'fiddle' \
                                                              -e 'fileutils' \
                                                              -e 'forwardable' \
                                                              -e 'io-console' \
                                                              -e 'ipaddr' \
                                                              -e 'irb' \
                                                              -e 'json' \
                                                              -e 'libxml-ruby' \
                                                              -e 'logger' \
                                                              -e 'matrix' \
                                                              -e 'minitest' \
                                                              -e 'mutex_m' \
                                                              -e 'net-telnet' \
                                                              -e 'nokogiri' \
                                                              -e 'openssl' \
                                                              -e 'ostruct' \
                                                              -e 'power_assert' \
                                                              -e 'prime' \
                                                              -e 'psych' \
                                                              -e 'rake' \
                                                              -e 'rexml' \
                                                              -e 'rdoc' \
                                                              -e 'rss' \
                                                              -e 'scanf' \
                                                              -e 'shell' \
                                                              -e 'sqlite3' \
                                                              -e 'stringio' \
                                                              -e 'strscan' \
                                                              -e 'sync' \
                                                              -e 'test-unit' \
                                                              -e 'thwait' \
                                                              -e 'tracer' \
                                                              -e 'webrick' \
                                                              -e 'xmlrpc' \
                                                              -e 'zlib' \
          ); do
            sudo /usr/bin/gem uninstall --force --all --ignore-dependencies --executables "$gem"
          done

      - name: Uninstall Homebrew
        run: |
          set -e
          set -u
          set -o pipefail

          brew update
          sudo rm -rf /usr/local/miniconda &
          rm -rf /usr/local/lib/node_modules &
          rm -f /usr/local/bin/terminal-notifier
          rm -f /usr/local/bin/change_hostname.sh
          rm -f /usr/local/bin/azcopy

          if which brew &>/dev/null; then
            eval "$(brew list --formula | xargs -I% echo 'brew uninstall --formula --force --ignore-dependencies "%" &')"
            eval "$(brew list --cask | xargs -I% echo '{ brew uninstall --cask --force "%"; brew uninstall --cask --zap --force "%"; } &')"
            brew uninstall --cask --zap --force adoptopenjdk/openjdk/adoptopenjdk8 &
            brew uninstall --cask --zap --force dotnet &
            brew uninstall --cask --zap --force julia &
            brew uninstall --cask --zap --force mono-mdk &
            brew uninstall --cask --zap --force xamarin-android &
            brew uninstall --cask --zap --force xamarin-ios &
            brew uninstall --cask --zap --force xamarin-mac &
            brew uninstall --cask --zap --force visual-studio &
            wait
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)" -- --force
          fi

      - name: Uninstall leftover packages
        run: |
          set -e
          set -u
          set -o pipefail

          mkdir -p /tmp/trash
          for pkg in /var/db/receipts/*.plist; do
            pkg_id="$(basename "${pkg}" .plist)"
            volume="$(pkgutil --pkg-info "${pkg_id}" | sed -n -e 's/^volume: //p')"
            location="$(pkgutil --pkg-info "${pkg_id}" | sed -n -e 's/^location: //p')"
            pkgutil --only-files --files "${pkg_id}" | xargs -I% sudo mv -f "${volume}${location}/%" /tmp/trash/ || true
            pkgutil --only-dirs --files "${pkg_id}" | xargs -I% sudo rmdir -p "${volume}${location}/%" || true
            pkgutil --forget "${pkg_id}"
          done

      - name: Delete broken symlinks
        run: |
          set -e
          set -u
          set -o pipefail

          for exe in /usr/local/bin/*; do
            if [[ -L "$exe" ]] && ! [[ -e "$exe" ]]; then
              rm "$exe"
            fi
          done

      - name: Delete leftover applications
        run: |
          set -e
          set -u
          set -o pipefail

          sudo rm -rf '/Applications/Google Chrome for Testing.app' &
          sudo rm -rf '/Applications/Python 2.7' &
          sudo rm -rf '/Applications/Python 3.11' &
          sudo rm -rf '/Applications/Visual Studio 2019.app' &
          wait

          ls -al /Applications /Applications/Utilities

      - name: Clean user directory
        run: |
          set -e
          set -u
          set -o pipefail

          for trash in ~/.DS_Store \
                       ~/.Trash/* \
                       ~/.aliyun \
                       ~/.android \
                       ~/.azcopy \
                       ~/.azure \
                       ~/.bash_history \
                       ~/.bash_profile \
                       ~/.bash_sessions \
                       ~/.bashrc \
                       ~/.cabal \
                       ~/.cache \
                       ~/.cargo \
                       ~/.cocoapods \
                       ~/.composer \
                       ~/.conda \
                       ~/.config \
                       ~/.dotnet \
                       ~/.fastlane \
                       ~/.gem \
                       ~/.ghcup \
                       ~/.gitconfig \
                       ~/.gradle \
                       ~/.local \
                       ~/.m2 \
                       ~/.mono \
                       ~/.npm \
                       ~/.npmrc \
                       ~/.nvm \
                       ~/.oracle_jre_usage \
                       ~/.packer.d \
                       ~/.rustup \
                       ~/.sh_history \
                       ~/.ssh \
                       ~/.subversion \
                       ~/.sqlite_history \
                       ~/.vcpkg \
                       ~/.viminfo \
                       ~/.wget-hsts \
                       ~/.yarn \
                       ~/Library/Caches/Homebrew \
                       ~/Microsoft \
                       ~/hostedtoolcache \
                       ~/*.txt; do
            if [[ -e "$trash" ]]; then
              mv "$trash" /tmp/trash/
            fi
          done

          
      - name: download source and run build
        run: |
          git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git \
          export PATH="$PATH:$(pwd)/depot_tools" \
          mkdir chromium && cd chromium \
          fetch ios --no-history \
          cd src \
          echo -e "[gn_args]\nuse_blink = true" > ~/.setup-gn \
          python3 ios/build/tools/setup-gn.py \
          autoninja -C out/Debug-iphonesimulator content_shell
    
